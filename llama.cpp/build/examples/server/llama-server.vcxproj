<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x64</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{76971EC6-F26C-3A8F-9234-5C418E385A6D}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <WindowsTargetPlatformVersion>10.0.26100.0</WindowsTargetPlatformVersion>
    <Platform>x64</Platform>
    <ProjectName>llama-server</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\bin\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">llama-server.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">llama-server</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\bin\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">llama-server.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">llama-server</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\bin\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">llama-server.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">llama-server</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\bin\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">llama-server.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">llama-server</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</GenerateManifest>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <MinimalRebuild></MinimalRebuild>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <SupportJustMyCode></SupportJustMyCode>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR="Debug"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <ScanSourceForModuleDependencies>false</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_DEBUG;_WINDOWS;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR=\"Debug\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\common\Debug\common.lib;ws2_32.lib;..\..\src\Debug\llama.lib;..\..\ggml\src\Debug\ggml.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>D:/Flux to GGUF/llama.cpp/build/examples/server/Debug/llama-server.lib</ImportLibrary>
      <ProgramDataBaseFile>D:/Flux to GGUF/llama.cpp/build/bin/Debug/llama-server.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>Default</BasicRuntimeChecks>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <MinimalRebuild></MinimalRebuild>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <SupportJustMyCode></SupportJustMyCode>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR="Release"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <ScanSourceForModuleDependencies>false</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR=\"Release\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\common\Release\common.lib;ws2_32.lib;..\..\src\Release\llama.lib;..\..\ggml\src\Release\ggml.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>D:/Flux to GGUF/llama.cpp/build/examples/server/Release/llama-server.lib</ImportLibrary>
      <ProgramDataBaseFile>D:/Flux to GGUF/llama.cpp/build/bin/Release/llama-server.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>Default</BasicRuntimeChecks>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <MinimalRebuild></MinimalRebuild>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <SupportJustMyCode></SupportJustMyCode>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR="MinSizeRel"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <ScanSourceForModuleDependencies>false</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR=\"MinSizeRel\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\common\MinSizeRel\common.lib;ws2_32.lib;..\..\src\MinSizeRel\llama.lib;..\..\ggml\src\MinSizeRel\ggml.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>D:/Flux to GGUF/llama.cpp/build/examples/server/MinSizeRel/llama-server.lib</ImportLibrary>
      <ProgramDataBaseFile>D:/Flux to GGUF/llama.cpp/build/bin/MinSizeRel/llama-server.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>Default</BasicRuntimeChecks>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <MinimalRebuild></MinimalRebuild>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <SupportJustMyCode></SupportJustMyCode>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR="RelWithDebInfo"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <ScanSourceForModuleDependencies>false</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_CRT_SECURE_NO_WARNINGS;CMAKE_INTDIR=\"RelWithDebInfo\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\Flux to GGUF\llama.cpp\examples;D:\Flux to GGUF\llama.cpp\examples\server;D:\Flux to GGUF\llama.cpp\build\examples\server;D:\Flux to GGUF\llama.cpp\common\.;D:\Flux to GGUF\llama.cpp\src\.;D:\Flux to GGUF\llama.cpp\src\..\include;D:\Flux to GGUF\llama.cpp\ggml\src\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\common\RelWithDebInfo\common.lib;ws2_32.lib;..\..\src\RelWithDebInfo\llama.lib;..\..\ggml\src\RelWithDebInfo\ggml.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>D:/Flux to GGUF/llama.cpp/build/examples/server/RelWithDebInfo/llama-server.lib</ImportLibrary>
      <ProgramDataBaseFile>D:/Flux to GGUF/llama.cpp/build/bin/RelWithDebInfo/llama-server.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\colorthemes.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating colorthemes.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/colorthemes.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/colorthemes.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\colorthemes.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\colorthemes.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating colorthemes.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/colorthemes.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/colorthemes.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\colorthemes.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\colorthemes.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating colorthemes.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/colorthemes.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/colorthemes.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\colorthemes.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\colorthemes.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating colorthemes.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/colorthemes.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/colorthemes.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\colorthemes.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\colorthemes.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\style.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating style.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/style.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/style.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\style.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\style.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating style.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/style.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/style.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\style.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\style.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating style.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/style.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/style.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\style.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\style.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating style.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/style.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/style.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\style.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\style.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\theme-beeninorder.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating theme-beeninorder.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-beeninorder.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-beeninorder.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-beeninorder.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-beeninorder.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating theme-beeninorder.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-beeninorder.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-beeninorder.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-beeninorder.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-beeninorder.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating theme-beeninorder.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-beeninorder.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-beeninorder.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-beeninorder.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-beeninorder.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating theme-beeninorder.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-beeninorder.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-beeninorder.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-beeninorder.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-beeninorder.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\theme-ketivah.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating theme-ketivah.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-ketivah.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-ketivah.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-ketivah.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-ketivah.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating theme-ketivah.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-ketivah.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-ketivah.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-ketivah.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-ketivah.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating theme-ketivah.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-ketivah.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-ketivah.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-ketivah.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-ketivah.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating theme-ketivah.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-ketivah.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-ketivah.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-ketivah.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-ketivah.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\theme-mangotango.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating theme-mangotango.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-mangotango.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-mangotango.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-mangotango.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-mangotango.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating theme-mangotango.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-mangotango.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-mangotango.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-mangotango.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-mangotango.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating theme-mangotango.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-mangotango.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-mangotango.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-mangotango.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-mangotango.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating theme-mangotango.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-mangotango.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-mangotango.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-mangotango.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-mangotango.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\theme-playground.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating theme-playground.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-playground.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-playground.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-playground.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-playground.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating theme-playground.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-playground.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-playground.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-playground.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-playground.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating theme-playground.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-playground.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-playground.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-playground.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-playground.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating theme-playground.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-playground.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-playground.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-playground.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-playground.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\theme-polarnight.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating theme-polarnight.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-polarnight.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-polarnight.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-polarnight.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-polarnight.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating theme-polarnight.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-polarnight.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-polarnight.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-polarnight.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-polarnight.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating theme-polarnight.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-polarnight.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-polarnight.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-polarnight.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-polarnight.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating theme-polarnight.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-polarnight.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-polarnight.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-polarnight.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-polarnight.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\theme-snowstorm.css.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating theme-snowstorm.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-snowstorm.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-snowstorm.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-snowstorm.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-snowstorm.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating theme-snowstorm.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-snowstorm.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-snowstorm.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-snowstorm.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-snowstorm.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating theme-snowstorm.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-snowstorm.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-snowstorm.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-snowstorm.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-snowstorm.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating theme-snowstorm.css.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/theme-snowstorm.css" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/theme-snowstorm.css.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\theme-snowstorm.css;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\theme-snowstorm.css.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\index.html.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating index.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating index.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating index.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating index.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\index-new.html.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating index-new.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index-new.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index-new.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index-new.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index-new.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating index-new.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index-new.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index-new.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index-new.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index-new.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating index-new.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index-new.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index-new.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index-new.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index-new.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating index-new.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index-new.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index-new.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index-new.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index-new.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\index.js.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating index.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating index.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating index.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating index.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/index.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/index.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\index.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\index.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\completion.js.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating completion.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/completion.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/completion.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\completion.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\completion.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating completion.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/completion.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/completion.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\completion.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\completion.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating completion.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/completion.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/completion.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\completion.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\completion.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating completion.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/completion.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/completion.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\completion.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\completion.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\system-prompts.js.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating system-prompts.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/system-prompts.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/system-prompts.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\system-prompts.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\system-prompts.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating system-prompts.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/system-prompts.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/system-prompts.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\system-prompts.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\system-prompts.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating system-prompts.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/system-prompts.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/system-prompts.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\system-prompts.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\system-prompts.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating system-prompts.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/system-prompts.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/system-prompts.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\system-prompts.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\system-prompts.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\prompt-formats.js.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating prompt-formats.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/prompt-formats.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/prompt-formats.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\prompt-formats.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\prompt-formats.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating prompt-formats.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/prompt-formats.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/prompt-formats.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\prompt-formats.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\prompt-formats.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating prompt-formats.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/prompt-formats.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/prompt-formats.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\prompt-formats.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\prompt-formats.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating prompt-formats.js.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/prompt-formats.js" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/prompt-formats.js.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\prompt-formats.js;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\prompt-formats.js.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\json-schema-to-grammar.mjs.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating json-schema-to-grammar.mjs.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/json-schema-to-grammar.mjs" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/json-schema-to-grammar.mjs.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\json-schema-to-grammar.mjs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\json-schema-to-grammar.mjs.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating json-schema-to-grammar.mjs.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/json-schema-to-grammar.mjs" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/json-schema-to-grammar.mjs.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\json-schema-to-grammar.mjs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\json-schema-to-grammar.mjs.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating json-schema-to-grammar.mjs.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/json-schema-to-grammar.mjs" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/json-schema-to-grammar.mjs.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\json-schema-to-grammar.mjs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\json-schema-to-grammar.mjs.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating json-schema-to-grammar.mjs.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/json-schema-to-grammar.mjs" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/json-schema-to-grammar.mjs.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\json-schema-to-grammar.mjs;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\json-schema-to-grammar.mjs.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\build\CMakeFiles\332183475584f27cab1521a23f372442\loading.html.hpp.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating loading.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/loading.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/loading.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\loading.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\loading.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating loading.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/loading.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/loading.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\loading.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\loading.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating loading.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/loading.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/loading.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\loading.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\loading.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating loading.html.hpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-DINPUT=D:/Flux to GGUF/llama.cpp/examples/server/public/loading.html" "-DOUTPUT=D:/Flux to GGUF/llama.cpp/build/examples/server/loading.html.hpp" -P "D:/Flux to GGUF/llama.cpp/scripts/xxd.cmake"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\examples\server\public\loading.html;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\loading.html.hpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\Flux to GGUF\llama.cpp\examples\server\CMakeLists.txt">
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Building Custom Rule D:/Flux to GGUF/llama.cpp/examples/server/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-SD:/Flux to GGUF/llama.cpp" "-BD:/Flux to GGUF/llama.cpp/build" --check-stamp-file "D:/Flux to GGUF/llama.cpp/build/examples/server/CMakeFiles/generate.stamp"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Building Custom Rule D:/Flux to GGUF/llama.cpp/examples/server/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-SD:/Flux to GGUF/llama.cpp" "-BD:/Flux to GGUF/llama.cpp/build" --check-stamp-file "D:/Flux to GGUF/llama.cpp/build/examples/server/CMakeFiles/generate.stamp"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Building Custom Rule D:/Flux to GGUF/llama.cpp/examples/server/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-SD:/Flux to GGUF/llama.cpp" "-BD:/Flux to GGUF/llama.cpp/build" --check-stamp-file "D:/Flux to GGUF/llama.cpp/build/examples/server/CMakeFiles/generate.stamp"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Building Custom Rule D:/Flux to GGUF/llama.cpp/examples/server/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" "-SD:/Flux to GGUF/llama.cpp" "-BD:/Flux to GGUF/llama.cpp/build" --check-stamp-file "D:/Flux to GGUF/llama.cpp/build/examples/server/CMakeFiles/generate.stamp"
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\Flux to GGUF\llama.cpp\build\examples\server\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="D:\Flux to GGUF\llama.cpp\examples\server\server.cpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\examples\server\utils.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\examples\server\httplib.h" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\colorthemes.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\style.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\theme-beeninorder.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\theme-ketivah.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\theme-mangotango.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\theme-playground.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\theme-polarnight.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\theme-snowstorm.css.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\index.html.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\index-new.html.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\index.js.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\completion.js.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\system-prompts.js.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\prompt-formats.js.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\json-schema-to-grammar.mjs.hpp" />
    <ClInclude Include="D:\Flux to GGUF\llama.cpp\build\examples\server\loading.html.hpp" />
  </ItemGroup>
  <ItemGroup />
  <ItemGroup>
    <ProjectReference Include="D:\Flux to GGUF\llama.cpp\build\ZERO_CHECK.vcxproj">
      <Project>{2704A1C3-FC5B-3ED0-88F2-292D511CBDE9}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
    <ProjectReference Include="D:\Flux to GGUF\llama.cpp\build\common\build_info.vcxproj">
      <Project>{431064F8-0225-3547-97EC-4D0DE9671594}</Project>
      <Name>build_info</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
    <ProjectReference Include="D:\Flux to GGUF\llama.cpp\build\common\common.vcxproj">
      <Project>{64449D69-94E7-3D0B-B296-C75C0CFAE307}</Project>
      <Name>common</Name>
    </ProjectReference>
    <ProjectReference Include="D:\Flux to GGUF\llama.cpp\build\ggml\src\ggml.vcxproj">
      <Project>{EEE892EA-755E-37DF-B762-7E6BD23AE8B9}</Project>
      <Name>ggml</Name>
    </ProjectReference>
    <ProjectReference Include="D:\Flux to GGUF\llama.cpp\build\src\llama.vcxproj">
      <Project>{855CBAD2-6848-3943-B8FF-37D3B904F20A}</Project>
      <Name>llama</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>